
pipeline {
    agent any
    environment {
        JenkinsDockerGCRSecret = credentials('jenkins-docker-gcr-secret')
    }
    stages {
        stage ('git clone - master') {
            when {
                branch 'master'
            }
            steps{
                git branch: 'master',
                    credentialsId: 'Rohan-Github-Account-Credentials',
                    url: 'https://github.com/rohan-searce/ci-cd-python-app'
            }
        }
        stage ('git clone - uat') {
            when {
                branch 'uat'
            }
            steps{
                git branch: 'uat',
                    credentialsId: 'Rohan-Github-Account-Credentials',
                    url: 'https://github.com/rohan-searce/ci-cd-python-app'
            }
        }
        stage ('git clone - prod') {
            when {
                branch 'prod'
            }
            steps{
               git branch: 'prod',
                    credentialsId: 'Rohan-Github-Account-Credentials',
                    url: 'https://github.com/rohan-searce/ci-cd-python-app'
            }
        }
        stage('Feature Branch Build') {
            when {
                expression { BRANCH_NAME != 'master' && BRANCH_NAME != 'uat' && BRANCH_NAME != 'prod'}
            }
            steps{
                echo "${BRANCH_NAME}"

                git branch: '${BRANCH_NAME}',
                    credentialsId: 'Rohan-Github-Account-Credentials',
                    url: 'https://github.com/rohan-searce/ci-cd-python-app'
                    
                dir ('mv-service') {
                    sh 'python -v'
                    sh 'python app.yml'
                }       
            }
        }
        stage ('build admin service into docker image - master') {
            when {
                branch 'master'
            }
            steps {
                dir ('mv-service') {
                    sh 'cat $JenkinsDockerGCRSecret | docker login --username _json_key --password-stdin https://gcr.io'

                    sh 'python -v'
                    sh 'docker build --file Dockerfile --tag gcr.io/searce-academy/master/jenkinsapp:$BUILD_NUMBER --tag gcr.io/searce-academy/master/jenkinsapp:latest .'
                    sh 'docker push gcr.io/searce-academy/master/jenkinsapp:$BUILD_NUMBER'   
                    sh 'docker push gcr.io/searce-academy/master/jenkinsapp:latest'
                    sh 'docker image rm gcr.io/searce-academy/master/jenkinsapp:$BUILD_NUMBER'
                    sh 'docker image rm gcr.io/searce-academy/master/jenkinsapp:latest'
                }
            }
        }
        stage ('build admin service into docker image - uat') {
            when {
                branch 'uat'
            }
            steps {
                dir ('mv-service') {
                    sh 'cat $JenkinsDockerGCRSecret | docker login --username _json_key --password-stdin https://gcr.io'
                    
                    sh 'python -v'
                    sh 'docker build --file Dockerfile --tag gcr.io/searce-academy/uat/jenkinsapp:$BUILD_NUMBER --tag gcr.io/searce-academy/uat/jenkinsapp:latest .'
                    sh 'docker push gcr.io/searce-academy/uat/jenkinsapp:$BUILD_NUMBER'   
                    sh 'docker push gcr.io/searce-academy/uat/jenkinsapp:latest'
                    sh 'docker image rm gcr.io/searce-academy/uat/jenkinsapp:$BUILD_NUMBER'
                    sh 'docker image rm gcr.io/searce-academy/uat/jenkinsapp:latest'  
                }
            }
        }
        stage ('build admin service into docker image - prod') {
            when {
                branch 'prod'
            }
            steps {
                dir ('mv-service') {
                    sh 'cat $JenkinsDockerGCRSecret | docker login --username _json_key --password-stdin https://gcr.io'

                    sh 'python -v'
                    sh 'docker build --file Dockerfile --tag gcr.io/searce-academy/prod/jenkinsapp:$BUILD_NUMBER --tag gcr.io/searce-academy/prod/jenkinsapp:latest .'
                    sh 'docker push gcr.io/searce-academy/prod/jenkinsapp:$BUILD_NUMBER'   
                    sh 'docker push gcr.io/searce-academy/prod/jenkinsapp:latest'
                    sh 'docker image rm gcr.io/searce-academy/prod/jenkinsapp:$BUILD_NUMBER'
                    sh 'docker image rm gcr.io/searce-academy/prod/jenkinsapp:latest'  
                }
            }
        }

    }
    post {
        always {
            slackSend (
                color: '#F7A200', 
                message: "STARTED: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"
            )
            deleteDir()
        }
        success {
            slackSend (
                color: '#00FF00', 
                message: "SUCCESS: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"
            )
        }
        failure {   
            slackSend (
                color: '#FF0000', 
                message: "FAILURE: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"
            )
        }
    }
}
